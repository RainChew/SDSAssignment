library(tseries)
library(zoo)
library(urca)
#step 0 - Read Dataset
df <- read.csv("External_Trade_Monthly.csv")
head(df)
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# Convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
#information for the data
summary(df)
str(df)
# check the duplicate rows
duplicated_rows <- duplicated(df$date)
sum(duplicated_rows)
# check the missing value
is.null(df)
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Year", main = "Monthly External Trade Data(RM)" )
#t is Date
t <- df$date
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
# If Gross_Exports are
Y <- df$Gross_Exports
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(export_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Gross Exports(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(export_ts)
acf(export_ts)
pacf(export_ts)
decomposed <- decompose(df_ts)
# If Gross_Imports are
Y <- df$Gross_Imports
import_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(import_ts, ylab = "Gross Imports(RM)(millions)", xlab = "Date", main = "Monthly Gross Imports(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(import_ts)
acf(import_ts)
pacf(import_ts)
decomposed <- decompose(import_ts)
# Plot the decomposed components
autoplot(decomposed, main = "Decomposed Components of Time Series")
# If Total_Trade are
Y <- df$Total_Trade
trade_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(trade_ts, ylab = "Total Trade(RM)(millions)", xlab = "Date", main = "Monthly Total Trade(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(trade_ts)
acf(trade_ts)
pacf(trade_ts)
# If Trade_Balance are
Y <- df$Trade_Balance
acf(Y,lag=24)
pacf(Y,lag=24)
#Split data
Y_train<-window(Y, start=c(1972,1), end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
balance_ts<-ts(Y_train, frequency = 12, start=c(2010,1))
#Check and Remove Outliers
balance_ts_clean = tsclean(balance_ts)
summary(balance_ts_clean)
summary(balance_ts)
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag=24, col = "blue")
pacf(balance_ts , lag=24 , col = "blue")
summary(balance_ts)
?acf
library(forecast)
library(ggplot2)
library(ggfortify)
library(MASS)
library(tseries)
library(zoo)
library(urca)
#step 0 - Read Dataset
df <- read.csv("External_Trade_Monthly.csv")
head(df)
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# Convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
#information for the data
summary(df)
str(df)
# check the duplicate rows
duplicated_rows <- duplicated(df$date)
sum(duplicated_rows)
# check the missing value
is.null(df)
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Year", main = "Monthly External Trade Data(RM)" )
#t is Date
t <- df$date
Y <- df$Trade_Balance
acf(Y,lag=24)
pacf(Y,lag=24)
#Split data
Y_train<-window(Y, start=c(1972,1), end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
#Split data
Y_train<-window(Y, start=c(1972,1), end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
#Split data
Y_train<-window(Y, start=c(2010,1), end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
library(forecast)
library(ggplot2)
library(ggfortify)
library(MASS)
library(tseries)
library(zoo)
library(urca)
#step 0 - Read Dataset
df <- read.csv("External_Trade_Monthly.csv")
head(df)
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# Convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
#information for the data
summary(df)
str(df)
# check the duplicate rows
duplicated_rows <- duplicated(df$date)
sum(duplicated_rows)
# check the missing value
is.null(df)
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Year", main = "Monthly External Trade Data(RM)" )
#t is Date
t <- df$date
Y <- df$Trade_Balance
acf(Y,lag=24)
pacf(Y,lag=24)
#Split data
Y_train<-window(Y, start=c(2010,1), end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
acf(Y,lag=24)
pacf(Y,lag=24)
#Split data
Y_train<-window(Y, start=c(2010,1), end=c(2017,12))
#Split data
Y_train<-window(Y, start=c(2010,1), end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
library(readr)
External_Trade_Monthly <- read_csv("External_Trade_Monthly.csv")
View(External_Trade_Monthly)
#t is Date
t <- df$date
Y <- df$Trade_Balance
acf(Y,lag=24)
pacf(Y,lag=24)
#Split data
Y_train<-window(Y, start=c(2010,1), end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Year", main = "Monthly External Trade Data(RM)" )
#t is Date
t <- df$date
Y <- df$Trade_Balance
#Split data
Y_train<-window(Y, start=c(2010,1), end=c(2017,12))
#Split data
windowed_data <- window(Y, start = c(2010, 1), end = c(2017, 12))
#Split data
Y_train<-window(Y, start=c(2010,1)
#Split data
Y_train<-window(Y, start=c(2010,1))
#Split data
Y_train<-window(Y, start=c(2010,1))
#Split data
Y_train<-window(Y, start=c(2010,1)))
#Split data
Y_train<-window(Y, start=c(2010,1)
Y_test<-window(Y, start=c(2018,1))
library(timeSeries)
#Split data
Y_train<-window(Y, start=c(2010,1))
#Split data
Y_train<-window(Y, start=c(2010,1),end=c(2017,12))
balance_ts<-ts(Y, frequency = 12, start=c(2010,1))
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
#Split data
Y_train<-window(Y, start=c(2010,1),end=c(2017,12))
Y<-ts(Y, frequency = 12, start=c(2010,1))
#Split data
Y_train<-window(Y, start=c(2010,1),end=c(2017,12))
Y <- df$Trade_Balance
acf(Y,lag=24)
pacf(Y,lag=24)
Y_ts<-ts(Y, frequency = 12, start=c(2010,1))
plot.ts(Y_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
#Split data
Y_train<-window(Y, start=c(2010,1),end=c(2017,12))
Y_test<-window(Y, start=c(2018,1))
#Split data
Y_train<-window(Y_ts, start=c(2010,1),end=c(2017,12))
Y_test<-window(Y_ts, start=c(2018,1))
plot.ts(Y_train, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag=24, col = "blue")
pacf(balance_ts , lag=24 , col = "blue")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(Y_train)
acf(Y_train, lag=24, col = "blue")
pacf(Y_train , lag=24 , col = "blue")
checkresiduals(Y_train)
summary(Y_train)
#Check differencing
ndiffs(Y_train)
nsdiffs(Y_train)
#seasonal differencing
diff_Y <- diff(Y_train, differences = 1,lag=12)
acf(diff_Y)
adf.test(diff_Y)
adf.test(Y_test)
adf.test(Y_train)
adf.test(diff_Y)
acf(diff_Y)
pacf(diff_Y)
adf.test(diff_Y)
diff_Y <- diff(diff_Y,differences = 1)
acf(diff_Y)
adf(diff_Y)
adf.test(diff_Y)
acf(diff_Y)
pacf(diff_Y)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
diff_Y <- diff(diff_Y,differences = 1)
acf(diff_Y,lag=24)
adf.test(diff_Y)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
acf(diff_Y,lag=24)
acf(Y_train, lag=24, col = "blue")
pacf(Y_train , lag=24 , col = "blue")
#Check differencing
ndiffs(Y_train)
nsdiffs(Y_train)
acf(Y_train, lag=24, col = "blue")
pacf(Y_train , lag=24 , col = "blue")
checkresiduals(Y_train)
summary(Y_train)
#Check differencing
ndiffs(Y_train)
nsdiffs(Y_train)
adf.test(Y_train)
#seasonal differencing
diff_Y <- diff(Y_train, differences = 1,lag=12)
#Check differencing
ndiffs(Y_train)
nsdiffs(Y_train)
adf.test(Y_train)
#seasonal differencing
diff_Y <- diff(Y_train, differences = 1,lag=12)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
adf.test(diff_Y)
diff_Y <- diff(diff_Y,differences = 1)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
adf.test(diff_Y)
checkresiduals(diff_Y)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
# STEP 4
# Model
# SARIMA
sarima113212 = arima(x = diff_Y,order= c(1,1,2),seasonal=list(order=c(1,1,1),period=12))
sarima113212
summary(sarima113212)
checkresiduals(sarima113212)
# STEP 4
# Model
# SARIMA
sarima113212 = arima(x = diff_Y,order= c(1,1,3),seasonal=list(order=c(2,1,1),period=12))
sarima113212
summary(sarima113212)
checkresiduals(sarima113212)
auto.arima(diff_Y,trace = true,order="aic")
auto.arima(diff_Y,trace = true,ic="aic")
auto.arima(diff_Y,trace = true,ic="aic")
auto.arima(diff_Y,trace = true)
auto.arima(diff_Y,ic = "aic",trace = TRUE)
summary(sarima113212)
checkresiduals(sarima113212)
auto.arima(sarima113212,ic = "aic",trace = TRUE)
library(lmtest)
coeftest(sarima113212)
# Check stationary using raw dataset (adf,acf,pacf)
# Examine the distribution
hist(Y_train, main = "Histogram of IPG3113N", xlab = "IPG3113N")
# Box plot
boxplot(Y_train, main = "Box Plot of IPG3113N", ylab = "IPG3113N")
# Check stationary using raw dataset (adf,acf,pacf)
# Examine the distribution
hist(Y_train, main = "Histogram of Trade Balance(RM)", xlab = "Trade Balance")
# Box plot
boxplot(Y_train, main = "Box Plot of Trade Balance(RM)", ylab = "Trade Balance(RM)")
ts_data <- ts(Y_train, frequency = 12)  # Assuming monthly data (frequency = 12)
decomposition <- decompose(ts_data)
plot(decomposition) # Plot the decomposition components (trend, seasonal, and remainder)
# Visual Inspection of Trend Component
plot(decomposition$trend, main = "Trend Component", xlab = "Date", ylab = "Trend")
# Visual Inspection of Trend Component
plot(decomposition$trend, main = "Trend Component", xlab = "Date", ylab = "Trend")
plot(decomposition) # Plot the decomposition components (trend, seasonal, and remainder)
# Visual Inspection of Trend Component
plot(decomposition$trend, main = "Trend Component", xlab = "Date", ylab = "Trend")
# Visual Inspection of Seasonal Component
plot(decomposition$seasonal, main = "Seasonal Component", xlab = "Date", ylab = "Seasonal")
# Visual Inspection of Residual Component
plot(decomposition$random, main = "Residual Component", xlab = "Date", ylab = "Residual")
#Check differencing
ndiffs(Y_train)
nsdiffs(Y_train)
# Check Transformation or not
skew <- skewness(Y_train)
print(skew)
(Y_train)
(Y_train)
(Y_train)
(Y_train)
(Y_train)
(Y_train)
(Y_train)
(Y_train)
# # Check Transformation or not
# skew <- skewness(Y_train)
# print(skew)
#Check differencing
ndiffs(Y_train)
nsdiffs(Y_train)
adf.test(Y_train)
#seasonal differencing
diff_Y <- diff(Y_train, differences = 1,lag=12)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
adf.test(diff_Y)
diff_Y <- diff(diff_Y,differences = 1)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
adf.test(diff_Y)
checkresiduals(diff_Y)
# STEP 4
# Model
# SARIMA
sarima113212 = arima(x = diff_Y,order= c(1,1,3),seasonal=list(order=c(2,1,1),period=12))
sarima113212
summary(sarima113212)
checkresiduals(sarima113212)
auto.arima(diff_Y,ic = "aic",trace = TRUE)
library(lmtest)
coeftest(sarima113212)
acf(diff_Y,lag=24)
diff_Y <- diff(diff_Y,differences = 1)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
# Box plot
boxplot(Y_train, main = "Box Plot of Trade Balance(RM)", ylab = "Trade Balance(RM)")
adf.test(Y_train)
acf(Y_train, lag=24, col = "blue")
pacf(Y_train , lag=24 , col = "blue")
checkresiduals(Y_train)
summary(Y_train)
ts_data <- ts(Y_train, frequency = 12)  # Assuming monthly data (frequency = 12)
decomposition <- decompose(ts_data)
plot(decomposition) # Plot the decomposition components (trend, seasonal, and remainder)
# Visual Inspection of Trend Component
plot(decomposition$trend, main = "Trend Component", xlab = "Date", ylab = "Trend")
# Visual Inspection of Seasonal Component
plot(decomposition$seasonal, main = "Seasonal Component", xlab = "Date", ylab = "Seasonal")
# Visual Inspection of Residual Component
plot(decomposition$random, main = "Residual Component", xlab = "Date", ylab = "Residual")
# # Check Transformation or not
# skew <- skewness(Y_train)
# print(skew)
#Check differencing
ndiffs(Y_train)
nsdiffs(Y_train)
adf.test(Y_train)
#seasonal differencing
diff_Y <- diff(Y_train, differences = 1,lag=12)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
adf.test(diff_Y)
diff_Y <- diff(diff_Y,differences = 1)
acf(diff_Y,lag=24)
pacf(diff_Y,lag=24)
adf.test(diff_Y)
checkresiduals(diff_Y)
# STEP 4
# Model
# SARIMA
sarima113212 = arima(x = diff_Y,order= c(1,1,3),seasonal=list(order=c(2,1,2),period=12))
sarima113212
summary(sarima113212)
checkresiduals(sarima113212)
auto.arima(diff_Y,ic = "aic",trace = TRUE)
library(lmtest)
coeftest(sarima113212)
# Q* = 19.281, df = 9, p-value = 0.02291
fit <- auto.arima(diff_Y)
summary(fit)
auto.arima(diff_Y,ic = "aic",trace = TRUE)
auto.arima(Y,ic = "aic",trace = TRUE)
auto.arima(diff_Y,ic = "aic",trace = TRUE)
aic_value <- AIC(sarima113212)
aic_value
coeftest(sarima113212)
sarima_model <- arima(diff_Y, order = c(2, 1, 1), seasonal = list(order = c(2, 1, 0), period = 12))
acf(sarima_model)
summary(sarima_model)
sarima_model <- arima(diff_Y, order = c(2, 0, 1), seasonal = list(order = c(2, 0, 0), period = 12))
summary(sarima_model)
acf(residuals(sarima_model))
pacf(residuals(sarima_model))
acf(residuals(sarima_model))
pacf(residuals(sarima_model))
sarima_forecasts <- forecast(sarima_model, h = length(Y_test))
accuracy_metrics <- accuracy(sarima_forecasts, Y_test)
print(accuracy_metrics)
# Plot the SARIMA forecasts and actual data
plot(sarima_forecasts, main = "SARIMA Forecast vs. Actual")
lines(Y_test, col = "red")
legend("topright", legend = c("Forecast", "Actual"), col = c("blue", "red"), lty = 1)
# Plot the SARIMA forecasts and actual data
plot(sarima_forecasts, main = "SARIMA Forecast vs. Actual")
lines(Y_test, col = "red")
legend("topright", legend = c("Forecast", "Actual"), col = c("blue", "red"), lty = 1)
# Plot the SARIMA forecasts and actual data
plot(sarima_forecasts, main = "SARIMA Forecast vs. Actual")
lines(Y_test, col = "red")
legend("topright", legend = c("Forecast", "Actual"), col = c("blue", "red"), lty = 1)
# Plot the SARIMA forecasts and actual data
plot(sarima_forecasts, main = "SARIMA Forecast vs. Actual")
lines(Y_test, col = "red")
legend("topright", legend = c("Forecast", "Actual"), col = c("blue", "red"), lty = 1)
# ME     RMSE      MAE      MPE     MAPE      MASE
# Training set -9.181547 2568.978 2090.757 5.333185 284.1119 0.3980378
# ACF1
# Training set 0.01480649
Box.test(resid(fit),lag=24,type = c("Ljung-Box"))
Box.test(resid(fit),lag=24,type = c("Ljung-Box"))
# Box-Ljung test
#
# data:  resid(fit)
# X-squared = 23.102, df = 24, p-value = 0.5138
coef(fit)
# Box-Ljung test
#
# data:  resid(fit)
# X-squared = 23.102, df = 24, p-value = 0.5138
coeftest(fit)
# ETS Model
# ETS
fit <- ets(diff_Y)
summary(fit)
autoplot(fit)
summary(fit)
autoplot(fit)
library(STAT)
library(stats)
fit1 <- ets(Y_train, model="ANN", alpha=1e-04)
summary(fit1)
accuracy(forecast(fit1), Y_test)
fit2 <- ets(Y_test, model = fit1)
Box.test(fit2$residuals, type="Ljung", lag=24)
accuracy(fit2)
fit1 <- ets(Y_train, model="ANN", alpha=1e-04)
summary(fit1)
accuracy(forecast(fit1), Y_test)
fit2 <- ets(Y_test, model = fit1)
Box.test(fit2$residuals, type="Ljung", lag=24)
accuracy(fit2)
