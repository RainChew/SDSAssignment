fit <- auto.arima(df2)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)", las = 2)
plot(y, df$Period)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
auto.arima(y, ic="aic", trace=TRUE)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)", las = 2)
plot(y, x)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
auto.arima(y, ic="aic", trace=TRUE)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
plot(y, x)
#step 7
library(forecast)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
plot(x, y)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
model <- lm(y~x)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
auto.arima(y, ic="aic", trace=TRUE)
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
model <- lm(y~x)
#find optimal lambda for Box-Cox transformation
bc <- boxcox(y ~ x)
plot(bc)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
auto.arima(y, ic="aic", trace=TRUE)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
model <- lm(y~x)
#find optimal lambda for Box-Cox transformation
bc <- boxcox(y ~ x)
plot(bc)
#fit new linear regression model using the Box-Cox transformation
new_model <- lm(((y^lambda-1)/lambda) ~ x)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
auto.arima(y, ic="aic", trace=TRUE)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
#step 2
model <- lm(y~x)
#find optimal lambda for Box-Cox transformation
bc <- boxcox(y ~ x)
plot(bc)
#fit new linear regression model using the Box-Cox transformation
new_model <- lm(((y^lambda-1)/lambda) ~ x)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
auto.arima(y, ic="aic", trace=TRUE)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
#step 2
model <- lm(y~x)
#find optimal lambda for Box-Cox transformation
bc <- boxcox(y ~ x)
plot(bc)
#fit new linear regression model using the Box-Cox transformation
new_model <- lm(((y^lambda-1)/lambda) ~ x)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
#step 2
model <- lm(y~x)
#find optimal lambda for Box-Cox transformation
bc <- boxcox(y ~ x)
plot(bc)
#fit new linear regression model using the Box-Cox transformation
library(MASS)
new_model <- lm(((y^lambda-1)/lambda) ~ x)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
#step 2
# Fit a linear regression model
model <- lm(y ~ x)
# Find optimal lambda for Box-Cox transformation
library(MASS)
bc <- boxcox(y ~ x)
(lambda <- bc$x[which.max(bc$y)])
# Perform the Box-Cox transformation on y
transformed_y <- (y^lambda - 1) / lambda
# Fit a new linear regression model using the transformed y
new_model <- lm(transformed_y ~ x)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
library(forecast)
library(ggplot2)
library(MASS)
# Create a time series object
df <- ts(df[, c("Trade_Balance")], frequency = 12, start = c(2010, 1))
# Create the first time series plot
plot.ts(df, ylab = "Trade Balance (RM)(millions)", xlab = "Period", main = "Monthly Trade Balance (RM)")
# Step 2: Fit a linear regression model
model <- lm(Trade_Balance ~ time(df))
# Find optimal lambda for Box-Cox transformation
bc <- boxcox(model)
(lambda <- bc$x[which.max(bc$y)])
# Perform the Box-Cox transformation on y
transformed_y <- (df$Trade_Balance^lambda - 1) / lambda
# Create a new time series with the transformed y
transformed_df <- ts(transformed_y, frequency = 12, start = c(2010, 1))
# Create a plot for the transformed data
plot.ts(transformed_df, ylab = "Transformed Trade Balance", xlab = "Period", main = "Transformed Monthly Trade Balance")
# Fit a linear regression model using the transformed y
new_model <- lm(transformed_y ~ time(df))
# Step 7: Fit a time series model (auto.arima) on the transformed data
fit <- auto.arima(transformed_df)
summary(fit)
auto.arima(transformed_df, ic = "aic", trace = TRUE)
nsdiffs(data)
nsdiffs(y)
ndiffs(y)
# Apply non-seasonal differencing
differenced_y <- diff(y, differences = 1)
# Plot the differenced series
plot.ts(differenced_y, ylab = "Differenced Trade Balance(RM)(millions)", xlab = "Years", main = "Differenced Trade Balance(RM)")
# Perform Augmented Dickey-Fuller test to check for stationarity
adf.test_result <- adf.test(differenced_y)
print(adf.test_result)
#step3
library(tseries)
ndiffs(y)
# Apply non-seasonal differencing
differenced_y <- diff(y, differences = 1)
# Plot the differenced series
plot.ts(differenced_y, ylab = "Differenced Trade Balance(RM)(millions)", xlab = "Years", main = "Differenced Trade Balance(RM)")
# Perform Augmented Dickey-Fuller test to check for stationarity
adf.test_result <- adf.test(differenced_y)
print(adf.test_result)
#step 7
library(forecast)
fit <- auto.arima(y)
summary(fit)
auto.arima(y, ic="aic", trace=TRUE)
#step 7
library(forecast)
fit <- auto.arima(differenced_y)
summary(fit)
auto.arima(differenced_y, ic="aic", trace=TRUE)
checkresiduals(fit_model)
checkresiduals(new_model)
ndiffs(differenced_y)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
adf.test(df)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
adf.test(y)
acf(y)
pacf(y)
library(forecast)
library(ggplot2)
library(MASS)
#step 1
df <- read.csv("External_Trade_Monthly.csv")
print(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
df
df <- ts(df, frequency = 12, start =c(2010,1))
# df <- log(df)
plot.ts(df, ylab = "Trade Balance(RM)(millions)", xlab = "Period", main = "Monthly Trade Balance(RM)")
#Drop Variable
y <- df[,c(5)]
x <- df[,c(1)]
#show plot
#y = trade balance
plot.ts(y, ylab = "Trade Balance(RM)(millions)",xlab="Years", main = "Monthly Trade Balance(RM)")
adf.test(y)
acf(y)
pacf(y)
adf.test(y)
acf(y)
pacf(y)
# Perform Augmented Dickey-Fuller test to check for stationarity
adf.test_result <- adf.test(differenced_y)
#step 2
# Fit a linear regression model
model <- lm(y ~ x)
# Find optimal lambda for Box-Cox transformation
library(MASS)
bc <- boxcox(y ~ x)
(lambda <- bc$x[which.max(bc$y)])
# Perform the Box-Cox transformation on y
transformed_y <- (y^lambda - 1) / lambda
# Fit a new linear regression model using the transformed y
new_model <- lm(transformed_y ~ x)
#step3
library(tseries)
ndiffs(y)
# Apply non-seasonal differencing
differenced_y <- diff(y, differences = 1)
ndiffs(differenced_y)
# Plot the differenced series
plot.ts(differenced_y, ylab = "Differenced Trade Balance(RM)(millions)", xlab = "Years", main = "Differenced Trade Balance(RM)")
# Perform Augmented Dickey-Fuller test to check for stationarity
adf.test_result <- adf.test(differenced_y)
print(adf.test_result)
adf.test(y)
ets_model <- ets(differenced_y)
print(ets_model)
arima_model <- auto.arima(differenced_y)
print(arima_model)
sarima_model <- auto.arima(differenced_y, seasonal = TRUE)
print(sarima_model)
checkresiduals(new_model)
checkresiduals(sarima_model)
checkresiduals(aarima_model)
checkresiduals(arima_model)
checkresiduals(arima_model)
checkresiduals(ets_model)
