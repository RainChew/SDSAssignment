summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
summary(df)
str(df)
# check the missing value
is.null(df)
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Period", main = "Monthly Trade Balance(RM)" )
#t is Date
t <- df$date
# If Gross_Exports are
Y <- df$Gross_Exports
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(export_ts)
acf(export_ts)
pacf(export_ts)
decomposed <- decompose(df_ts)
# If Gross_Imports are
Y <- df$Gross_Imports
import_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(import_ts, ylab = "Gross Imports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(import_ts)
acf(import_ts)
pacf(import_ts)
decomposed <- decompose(import_ts)
# Plot the decomposed components
autoplot(decomposed, main = "Decomposed Components of Time Series")
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
pacf(residual_component)
# If Total_Trade are
Y <- df$Total_Trade
trade_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(trade_ts, ylab = "Total Trade(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(trade_ts)
acf(trade_ts)
pacf(trade_ts)
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag.max=50, col = "blue")
pacf(balance_ts , lag=10 , col = "blue")
?acf
?pacf
decomposed <- decompose(balance_ts)
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
pacf(residual_component)
# Check different
ndiffs(Y)
nsdiffs(Y)
decomposed <- decompose(balance_ts)
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
decomposition <- decompose(balance_ts, type = "multiplicative")
plot(decomposition)
# Check different
ndiffs(Y)
nsdiffs(Y)
arima_model <- arima(Y, order = c(1, 1, 0))
bc <- boxcox(Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
new_model <- arima(((Y^lambda-1)/lambda) ~ t)
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
log_Y = log(Y)
log_Y
plot(log_Y)
(lambda <- bc$x[which.max(bc$log_Y)])
(lambda <- bc$x[which.max(bc$log_Y)])
(lambda <- bc$t[which.max(bc$log_Y)])
(lambda <- bc$t[which.max(bc$log_Y)])
(lambda <- bc$t[which.max(bc$Y)])
(lambda <- bc$t[which.max(bc$Y)])
(lambda <- bc$t[which.max(bc$Y)])
(lambda <- bc$t[which.max(bc$Y)])
library(forecast)
library(ggplot2)
library(ggfortify)
library(MASS)
library(tseries)
#step 0
df <- read.csv("External_Trade_Monthly.csv")
head(df)
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
summary(df)
str(df)
# check the missing value
is.null(df)
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Period", main = "Monthly Trade Balance(RM)" )
#t is Date
t <- df$date
# If Gross_Exports are
Y <- df$Gross_Exports
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(export_ts)
acf(export_ts)
pacf(export_ts)
decomposed <- decompose(df_ts)
# If Gross_Imports are
Y <- df$Gross_Imports
import_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(import_ts, ylab = "Gross Imports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(import_ts)
acf(import_ts)
pacf(import_ts)
decomposed <- decompose(import_ts)
# Plot the decomposed components
autoplot(decomposed, main = "Decomposed Components of Time Series")
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
pacf(residual_component)
# If Total_Trade are
Y <- df$Total_Trade
trade_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(trade_ts, ylab = "Total Trade(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(trade_ts)
acf(trade_ts)
pacf(trade_ts)
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag.max=50, col = "blue")
pacf(balance_ts , lag=10 , col = "blue")
?acf
?pacf
decomposed <- decompose(balance_ts)
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
decomposition <- decompose(balance_ts, type = "multiplicative")
plot(decomposition)
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
pacf(residual_component)
# Check different
ndiffs(Y)
nsdiffs(Y)
arima_model <- arima(Y, order = c(1, 1, 0))
bc <- boxcox(Y ~ t)
plot(bc)
(lambda <- bc$t[which.max(bc$Y)])
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
log_Y = log(Y)
plot(log_Y)
bc <- boxcox(log_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
# Check different
ndiffs(log_Y)
nsdiffs(log_Y)
balance_log_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
balance_log_ts<-ts(log_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_log_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check different
ndiffs(Y)
ndiffs(diff_Y)
#difference
bc <- boxcox(diff_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
#difference
bc <- boxcox(diff_Y ~ t)
plot(bc)
#difference
bc <- boxcox(diff_Y ~ t)
(lambda <- bc$x[which.max(bc$y)])
#difference
bc <- boxcox(diff_Y ~ t)
bc <- boxcox(Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
transformed_data <- boxcox(your_data, lambda)
transformed_data <- boxcox(Y, lambda)
transformed_data <- boxcox(bc, lambda)
transformed_data <- boxcox(bc$y, lambda)
transformed_data <- boxcox(bc$x, lambda)
transformed_data <- boxcox(balance_ts, lambda)
transformed_data <- boxcox(Y ~ t, lambda)
bc <- boxcox(Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
transformed_data <- boxcox(Y ~ t, lambda)
back_transformed_data <- (transformed_data ^ lambda - 1) / lambda
transformed_data <- boxcox(Y ~ t, lambda)
back_transformed_data <- (transformed_data ^ lambda - 1) / lambda
transformed_data <- boxcox(Y ~ t, lambda)
plot(transformed_data)
plot(transformed_data)
transformed_data <- boxcox(Y ~ t, lambda)
plot(transformed_data)
#log
bc <- boxcox(log_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
log_Y = log(Y)
balance_log_ts<-ts(log_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_log_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(log_Y)
#difference
bc <- boxcox(diff_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
log_Y = log(Y)
balance_log_ts<-ts(log_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_log_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(log_Y)
#difference
bc <- boxcox(diff_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
diff_Y <- diff(Y, differences = 2)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
diff_Y <- diff(Y, differences = 3)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 4)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 5)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 100)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 100)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
diff_Y <- diff(Y, differences = 10)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag.max=50, col = "blue")
pacf(balance_ts , lag=10 , col = "blue")
?acf
?pacf
decomposed <- decompose(balance_ts)
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
decomposition <- decompose(balance_ts, type = "multiplicative")
plot(decomposition)
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
adf.test(diff_Y)
acf(diff_Y)
pacf(diff_Y)
adf.test(log_Y)
acf(log_Y)
pacf(log_Y)
acf(log_Y)
pacf(log_Y)
#difference
bc <- boxcox(diff_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
adf.test(diff_Y)
acf(diff_Y)
pacf(diff_Y)
install.packages("urca")
library(urca)
install.packages("urca")
kpss_test_result <- ur.kpss(balance_ts, type = "tau")
print(kpss_test_result)
?ur
??ur
??ur.kpss
kpss_test_result <- ur.kpss(balance_ts)
print(kpss_test_result)
, type = "tau"
, type = "tau"
kpss_test_result <- ur.kpss(balance_ts, type = "tau")
print(kpss_test_result)
pp_test_result <- ur.pp(balance_ts)
print(pp_test_result)
??ur.pp
summary(pp_test_result)
summary(kpss_test_result)
print(kpss_test_result)
kpss_test_result <- ur.kpss(diff_Y, type = "tau")
summary(kpss_test_result)
print(kpss_test_result)
adf.test(diff_Y)
adf.test(diff_Y)
adf.test(log_Y)
library(tseries)
adf.test(diff_Y)
adf.test(diff_Y)
acf(diff_Y)
pacf(diff_Y)
install.packages("urca")
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
# convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
library(forecast)
library(ggplot2)
library(ggfortify)
library(MASS)
library(tseries)
#step 0 - Read Dataset
df <- read.csv("External_Trade_Monthly.csv")
head(df)
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
#information for the data
summary(df)
str(df)
# convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
# Convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
#information for the data
summary(df)
str(df)
# check the duplicated rows
duplicated_rows <- duplicated(df$date)
sum(duplicated_rows)
# check the missing value
is.null(df)
