# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
decomposition <- decompose(balance_ts, type = "multiplicative")
plot(decomposition)
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
is.null(y)
is.null(y)
is.null(Y)
# Calculate a simple moving average
ma <- ma(Y, order = 12)  # Adjust the order as needed
plot(ma, main = "Moving Average of Time Series Data")
# Calculate a simple moving average
ma <- ma(Y, order = 10)  # Adjust the order as needed
plot(ma, main = "Moving Average of Time Series Data")
# Calculate a simple moving average
# Load the zoo package
library(zoo)
# Calculate a simple moving average
ma <- rollmean(my_time_series, k = 12, fill = NA, align = "right")
# Calculate a simple moving average
ma <- rollmean(Y, k = 12, fill = NA, align = "right")
# Plot the moving average
plot(ma, main = "Moving Average of Time Series Data")
# Load necessary libraries
library(Kendall)
# Load necessary libraries
install(Kendall)
install.packages("Kendall")
# Load necessary libraries
library(Kendall)
# Perform the Cox-Stuart trend test
cox_stuart_test_result <- cox.stuart.test(my_time_series)
# Perform the Cox-Stuart trend test
cox_stuart_test_result <- cox.stuart.test(Y)
# Load necessary libraries
library(Kendall)
# Perform the Cox-Stuart trend test
cox_stuart_test_result <- cox.stuart.test(Y)
# Print the test result
print(cox_stuart_test_result)
library(urca)
install.packages("randtests")
# Load necessary libraries
library(randtests)
# Perform the Cox-Stuart trend test
cox_stuart_test_result <- cox.stuart.test(Y)
# Print the test result
print(cox_stuart_test_result)
# Check different
ndiffs(Y)
nsdiffs(Y)
nsdiffs(Y)
bc <- boxcox(Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
arima_model <- arima(Y, order = c(1, 1, 0))
#log
bc <- boxcox(log_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
log_Y = log(Y)
balance_log_ts<-ts(log_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_log_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(log_Y)
adf.test(log_Y)
acf(log_Y)
pacf(log_Y)
#difference
bc <- boxcox(diff_Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
adf.test(diff_Y)
acf(diff_Y)
pacf(diff_Y)
install.packages("urca")
library(urca)
install.packages("urca")
kpss_test_result <- ur.kpss(balance_ts, type = "tau")
install.packages("urca")
library(urca)
kpss_test_result <- ur.kpss(balance_ts, type = "tau")
kpss_test_result
# Perform the Cox-Stuart trend test
cox_stuart_test_result <- cox.stuart.test(diff_Y)
# Perform the Cox-Stuart trend test
cox_stuart_test_result <- cox.stuart.test(diff_Y)
# Print the test result
print(cox_stuart_test_result)
# Test trend
# Load necessary libraries
library(randtests)
# Perform the Cox-Stuart trend test
cox_stuart_test_result <- cox.stuart.test(diff_Y)
# Print the test result
print(cox_stuart_test_result)
# Print the test result
summary(cox_stuart_test_result)
# Load necessary libraries (if not already loaded)
library(stats)
# Load necessary libraries (if not already loaded)
library(stats)
# Fit a linear regression model
lm_model <- lm(diff_Y ~ t)
# Fit a linear regression model
lm_model <- lm(diff_Y ~ time(diff_Y))
# Check the summary of the regression model
summary(lm_model)
library(Kendall)
mk_test_result <- MannKendall(Y)
print(mk_test_result)
library(forecast)
library(ggplot2)
library(ggfortify)
library(MASS)
library(tseries)
#step 0 - Read Dataset
df <- read.csv("External_Trade_Monthly.csv")
head(df)
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# Convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
#information for the data
summary(df)
str(df)
# check the duplicate rows
duplicated_rows <- duplicated(df$date)
sum(duplicated_rows)
# check the missing value
is.null(df)
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Year", main = "Monthly External Trade Data(RM)" )
#t is Date
t <- df$date
# If Gross_Exports are
Y <- df$Gross_Exports
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(export_ts)
acf(export_ts)
pacf(export_ts)
??ca.jo
cointegration_test_result <- ca.jo(data.frame(export_ts, t), type = "eigen", K = 2)
library(urca)
cointegration_test_result <- ca.jo(data.frame(export_ts, t), type = "eigen", K = 2)
cointegration_test_result <- ca.jo(data.frame(export_ts, t), type = "trace", K = 2)
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(export_ts)
acf(export_ts)
pacf(export_ts)
decomposed <- decompose(df_ts)
library(urca)
cointegration_test_result <- ca.jo(data.frame(export_ts, t), type = "trace", K = 2)
cointegration_test_result <- ca.jo(data.frame(export_ts, balance_diff_ts), type = "trace", K = 2)
summary(cointegration_test_result)
# Check different
ndiffs(Y)
nsdiffs(Y)
bc <- boxcox(Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
library(forecast)
library(ggplot2)
library(ggfortify)
library(MASS)
library(tseries)
#step 0 - Read Dataset
df <- read.csv("External_Trade_Monthly.csv")
head(df)
# Rename Period into date
colnames(df)[colnames(df) == "Period"]<-"date"
# Convert date format
df$date<-as.Date(df$date, format="%m/%d/%Y")
#view again to check character convert to date format
summary(df)
str(df)
#numeric
df$Gross_Exports <- as.numeric(gsub(",", "", df$Gross_Exports))
df$Gross_Imports <- as.numeric(gsub(",", "", df$Gross_Imports))
df$Total_Trade <- as.numeric(gsub(",", "", df$Total_Trade))
df$Trade_Balance <- as.numeric(gsub(",", "", df$Trade_Balance))
head(df)
#information for the data
summary(df)
str(df)
# check the duplicate rows
duplicated_rows <- duplicated(df$date)
sum(duplicated_rows)
# check the missing value
is.null(df)
df_ts<-ts(df, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, xlab = "Year", main = "Monthly External Trade Data(RM)" )
#t is Date
t <- df$date
# If Gross_Exports are
Y <- df$Gross_Exports
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(export_ts)
acf(export_ts)
pacf(export_ts)
decomposed <- decompose(df_ts)
# If Gross_Imports are
Y <- df$Gross_Imports
import_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(import_ts, ylab = "Gross Imports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(import_ts)
acf(import_ts)
pacf(import_ts)
decomposed <- decompose(import_ts)
# Plot the decomposed components
autoplot(decomposed, main = "Decomposed Components of Time Series")
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
pacf(residual_component)
# If Total_Trade are
Y <- df$Total_Trade
trade_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(trade_ts, ylab = "Total Trade(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(trade_ts)
acf(trade_ts)
pacf(trade_ts)
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
#Check and Remove Outliers
balance_ts_clean = tsclean(balance_ts)
summary(balance_ts_clean)
summary(balance_ts)
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag.max=50, col = "blue")
pacf(balance_ts , lag=10 , col = "blue")
?acf
?pacf
decomposed <- decompose(balance_ts)
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
decomposition <- decompose(balance_ts, type = "multiplicative")
plot(decomposition)
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
omponents of Time Series")
# Plot the decomposed components
autoplot(decomposed, main = "Decomposed Components of Time Series")
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# If Total_Trade are
Y <- df$Total_Trade
trade_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(trade_ts, ylab = "Total Trade(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(trade_ts)
acf(trade_ts)
pacf(trade_ts)
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
#Check and Remove Outliers
balance_ts_clean = tsclean(balance_ts)
summary(balance_ts_clean)
summary(balance_ts)
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag.max=50, col = "blue")
pacf(balance_ts , lag=10 , col = "blue")
?acf
?pacf
decomposed <- decompose(balance_ts)
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
decomposition <- decompose(balance_ts, type = "multiplicative")
plot(decomposition)
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
pacf(residual_component)
# Calculate a simple moving average
# Load the zoo package
library(zoo)
# Calculate a simple moving average
ma <- rollmean(Y, k = 12, fill = NA, align = "right")
# Plot the moving average
plot(ma, main = "Moving Average of Time Series Data")
# Check different
ndiffs(Y)
nsdiffs(Y)
bc <- boxcox(Y ~ t)
plot(bc)
(lambda <- bc$x[which.max(bc$y)])
# Generate or load your time series data
# Replace this with your actual time series data
# For example, you can create a time series using `ts()` or read data from a CSV file.
# Example: my_time_series <- ts(your_data, frequency = 12)  # Assuming monthly data
summary(diff_Y)
# Generate or load your time series data
# Replace this with your actual time series data
# For example, you can create a time series using `ts()` or read data from a CSV file.
# Example: my_time_series <- ts(your_data, frequency = 12)  # Assuming monthly data
summary(Y)
summary(diff_Y)
#difference
bc <- boxcox(diff_Y ~ t)
#difference
bc <- boxcox(diff_Y ~ time(diff_Y))
#difference
# bc <- boxcox(diff_Y ~ t)
# plot(bc)
(lambda <- bc$x[which.max(bc$y)])
new_model <- lm(((Y^lambda-1)/lambda) ~ t)
diff_Y <- diff(Y, differences = 1)
diff_Y <- diff(Y, differences = 2)
diff_Y <- diff(Y, differences = 0)
diff_Y <- diff(Y, differences = 1)
diff_Y <- diff(Y, differences = 2)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 120)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 119)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 118)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
diff_Y <- diff(Y, differences = 1)
balance_diff_ts<-ts(diff_Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(balance_diff_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
ndiffs(diff_Y)
adf.test(diff_Y)
# If Gross_Exports are
Y <- df$Gross_Exports
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(df_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
plot.ts(export_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(export_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
import_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(import_ts, ylab = "Gross Imports(RM)(millions)", xlab = "Date", main = "Monthly Gross Imports(RM)")
# If Gross_Exports are
Y <- df$Gross_Exports
export_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(export_ts, ylab = "Gross Exports(RM)(millions)", xlab = "Date", main = "Monthly Gross Exports(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(export_ts)
# If Gross_Imports are
Y <- df$Gross_Imports
import_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(import_ts, ylab = "Gross Imports(RM)(millions)", xlab = "Date", main = "Monthly Gross Imports(RM)")
# If Gross_Imports are
Y <- df$Gross_Imports
import_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(import_ts, ylab = "Gross Imports(RM)(millions)", xlab = "Date", main = "Monthly Gross Imports(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(import_ts)
# Plot the decomposed components
autoplot(decomposed, main = "Decomposed Components of Time Series")
# If Total_Trade are
Y <- df$Total_Trade
trade_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
plot.ts(trade_ts, ylab = "Total Trade(RM)(millions)", xlab = "Date", main = "Monthly Total Trade(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(trade_ts)
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
#Check and Remove Outliers
balance_ts_clean = tsclean(balance_ts)
summary(balance_ts_clean)
summary(balance_ts)
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
#Check and Remove Outliers
balance_ts_clean = tsclean(balance_ts)
summary(balance_ts_clean)
summary(balance_ts)
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# Check stationary using raw dataset (adf,acf,pacf)
adf.test(balance_ts)
acf(balance_ts, lag.max=50, col = "blue")
pacf(balance_ts , lag=10 , col = "blue")
?acf
?pacf
decomposed <- decompose(balance_ts)
# Step 2: Analyze Trend
# Extract the trend component from decomposition
trend_component <- decomposed$trend
# Plot the trend component
autoplot(trend_component, ylab = "Trend", main = "Trend Component")
# Step 3: Analyze Seasonality
# Extract the seasonal component from decomposition
seasonal_component <- decomposed$seasonal
# Plot the seasonal component
autoplot(seasonal_component, ylab = "Seasonal Component", main = "Seasonal Component")
decomposition <- decompose(balance_ts, type = "multiplicative")
plot(decomposition)
# Step 4: Analyze Residuals (Random Behavior)
# Extract the residual component from decomposition
residual_component <- decomposed$random
# Plot the residuals
autoplot(residual_component, ylab = "Residuals", main = "Residuals (Random Behavior)")
cbind(decomposed$x,decomposed$trend,decomposed$seasonal,decomposed$random)
# You can also plot ACF and PACF of residuals to identify any autocorrelation
acf(residual_component)
pacf(residual_component)
# Calculate a simple moving average
# Load the zoo package
library(zoo)
# Calculate a simple moving average
ma <- rollmean(Y, k = 12, fill = NA, align = "right")
# Plot the moving average
plot(ma, main = "Moving Average of Time Series Data")
# Check different
ndiffs(Y)
nsdiffs(Y)
summary(balance_ts_clean)
summary(balance_ts)
plot.ts(balance_ts, ylab = "Trade Balance(RM)(millions)", xlab = "Date", main = "Monthly Trade Balance(RM)")
# If Trade_Balance are
Y <- df$Trade_Balance
balance_ts<-ts(Y, frequency = 12, start=c(2010,1), end=c(2019,12))
Y
summary(Y)
rolling_var <- rollapply(balance_ts, width = 12, FUN = var, by = 1, align = "right", fill = NA)
plot(rolling_var, ylab = "Rolling Variance", xlab = "Date", main = "Rolling Variance")
rolling_var <- rollapply(balance_ts, width = 12, FUN = var, by = 1, align = "right", fill = NA)
plot(rolling_var, ylab = "Rolling Variance", xlab = "Date", main = "Rolling Variance")
